"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from datetime import timedelta
from dotenv import load_dotenv
from celery.schedules import crontab
import cloudinary
import cloudinary.uploader
import cloudinary.api
from decimal import Decimal

# Load .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-if8j+=!jy#771sta3@19&m-xyu)p6#*4zb@kh$v0u-jt35(a6x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost', 
    '127.0.0.1', 
    '192.168.222.151', 
    'api.nclex.com', 
    '.ngrok-free.app', 
    'testserver',
    'ec2-13-50-116-201.eu-north-1.compute.amazonaws.com',
    '13.50.116.201'
]

# Environment Variables Template (.env file)
# Database
DB_NAME = 'nclex'
DB_HOST = 'mongodb+srv://wariz:dbWariz@nclex.jfmioqk.mongodb.net/?retryWrites=true&w=majority&appName=nclex'
DB_USER = 'wariz'
DB_PASSWORD = 'dbWariz'
DB_AUTH_SOURCE = 'admin'


# JWT
JWT_SECRET_KEY = 'm8Ef15a6jVmwV13gKxFpSu32t8EhCiegP6jzByMHGBrWJOYyvi7M3DpNB2MfxpKVDlxfHARMWgrYT_8ASh0fkg'

# Email settings are configured below in the Email Settings section

# Cloudinary
CLOUDINARY_CLOUD_NAME = 'dvmse886w'
CLOUDINARY_API_KEY = '489264838748466'
CLOUDINARY_API_SECRET = 'qUYlv4AnJeqHCA6he_zH-qX_J9E'

# SITE SETTINGS
FRONTEND_URL = 'http://localhost:3000'
SITE_URL = 'http://localhost:8000'

# Optional: YouTube API key for better duration extraction
YOUTUBE_API_KEY = 'your-youtube-api-key'

# PAYMENT GATEWAY SETTINGS

# PAYSTACK SETTINGS (Primary Gateway - Nigerian Market) - LIVE CREDENTIALS
PAYSTACK_PUBLIC_KEY = os.getenv('PAYSTACK_PUBLIC_KEY', 'pk_live_9afe0ff4d8f81a67b5e799bd12a30551da1b0e19')
PAYSTACK_SECRET_KEY = os.getenv('PAYSTACK_SECRET_KEY', 'sk_live_36eb68b72a4a663e9dd4109431e7d4b0e66468d1')
PAYSTACK_WEBHOOK_SECRET = os.getenv('PAYSTACK_WEBHOOK_SECRET', 'your_webhook_secret_from_paystack_dashboard')
PAYSTACK_SUBACCOUNT_CODE = os.getenv('PAYSTACK_SUBACCOUNT_CODE', '')
PAYSTACK_SPLIT_CODE = os.getenv('PAYSTACK_SPLIT_CODE', '')

# FLUTTERWAVE SETTINGS (Secondary Gateway - Multi-country)
FLUTTERWAVE_PUBLIC_KEY = os.getenv('FLUTTERWAVE_PUBLIC_KEY', 'FLWPUBK_TEST-5fabb620c56266196d9b0137bea69763-X')
FLUTTERWAVE_SECRET_KEY = os.getenv('FLUTTERWAVE_SECRET_KEY', 'FLWSECK_TEST-d51c473fb205c99e70d234fb7e66dfa8-X')
FLUTTERWAVE_WEBHOOK_SECRET = os.getenv('FLUTTERWAVE_WEBHOOK_SECRET', '07eee1090b3f97904bf966e2f6f388f1954352b51ebeef505e6b95a366a4834d')
FLUTTERWAVE_ENCRYPTION_KEY = os.getenv('FLUTTERWAVE_ENCRYPTION_KEY', 'FLWSECK_TEST4a0345d92dac')

# DEVELOPMENT SETTINGS
DEBUG = True
SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 0

# Development Rate Limiting (disable for testing)
DISABLE_RATE_LIMITING = False  # Set to False in production

# Redis (for caching and rate limiting)
# REDIS_URL = 'redis://127.0.0.1:6379/1'

# Allowed Hosts
ALLOWED_HOSTS = [
    'localhost', 
    '127.0.0.1', 
    '192.168.222.151',
    '192.168.222.151:8000',
    'api.nclex.com', 
    '.ngrok-free.app', 
    'testserver'
]

# CORS Allowed origins
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000', 
    'http://127.0.0.1:3000',
    'http://192.168.96.151:3000',  # Your actual network IP
    'http://192.168.222.151:3000',
    'http://192.168.222.151:3001',
    'http://192.168.222.151:3002',
    # Vercel domains (actual deployed URLs)
    'https://nclex-cx5hhtc91-peters-projects-db86b6fd.vercel.app',
    'https://nclex-6h1515d1l-peters-projects-db86b6fd.vercel.app',
    'https://nclexkeysinternational.vercel.app',
    'https://nclexkeysinternational-git-main.vercel.app',
    # Legacy S3 domains (keeping for backward compatibility)
    'https://nclexkeysfrontend.s3.eu-north-1.amazonaws.com',
    'https://nclexkeysfrontend.s3-website.eu-north-1.amazonaws.com',
]

# Additional CORS settings for development
CORS_ALLOW_ALL_ORIGINS = True  # Temporarily enabled for testing
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# For development, allow any local network IP (more flexible)
if DEBUG:
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^http://192\.168\.\d+\.\d+:\d+$",  # Allow any 192.168.x.x:port
        r"^http://10\.\d+\.\d+\.\d+:\d+$",   # Allow any 10.x.x.x:port
        r"^http://172\.(1[6-9]|2[0-9]|3[0-1])\.\d+\.\d+:\d+$",  # Allow 172.16-31.x.x:port
        r"^http://localhost:\d+$",  # Allow any localhost port
        r"^http://127\.0\.0\.1:\d+$",  # Allow any 127.0.0.1 port
    ]

# Security
SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 31536000

# Celery Configuration - Using local memory instead of Redis
CELERY_BROKER_URL = 'memory://'
CELERY_RESULT_BACKEND = 'rpc://'

# Payment Gateway Settings
PAYMENT_GATEWAYS = {
    'paystack': {
        'public_key': 'pk_live_9afe0ff4d8f81a67b5e799bd12a30551da1b0e19',
        'secret_key': 'sk_live_36eb68b72a4a663e9dd4109431e7d4b0e66468d1',
        'base_url': 'https://api.paystack.co',
        'webhook_secret': 'your_webhook_secret_from_paystack_dashboard',
        'subaccount_code': '',
        'split_code': '',
    },
    'flutterwave': {
        'public_key': 'FLWPUBK_TEST-5fabb620c56266196d9b0137bea69763-X',
        'secret_key': 'FLWSECK_TEST-d51c473fb205c99e70d234fb7e66dfa8-X',
        'base_url': 'https://api.flutterwave.com/v3',
        'webhook_secret': '07eee1090b3f97904bf966e2f6f388f1954352b51ebeef505e6b95a366a4834d',
        'encryption_key': 'FLWSECK_TEST4a0345d92dac',
    }
}

# Cloudinary Configuration
cloudinary.config(
    cloud_name='dvmse886w',
    api_key='489264838748466',
    api_secret='qUYlv4AnJeqHCA6he_zH-qX_J9E',
    secure=True
)

# Payment configuration
PAYMENT_SETTINGS = {
    'MAX_PAYMENT_ATTEMPTS_PER_HOUR': 5,
    'PAYMENT_EXPIRY_MINUTES': 30,
    'MIN_COURSE_PRICE': Decimal('500.00'),  # 500 NGN minimum
    'MAX_COURSE_PRICE': Decimal('500000.00'),  # 500k NGN maximum
    'AUTO_REFUND_THRESHOLD': Decimal('50000.00'),  # Auto-process refunds below 50k
    'INSTRUCTOR_REVENUE_SHARE': Decimal('0.70'),  # 70% to instructor
    'PLATFORM_REVENUE_SHARE': Decimal('0.30'),  # 30% to platform
}

# Video processing settings
VIDEO_PROCESSING = {
    'MAX_FILE_SIZE_GB': 1,  # 1GB max per video
    'SUPPORTED_FORMATS': ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'],
    'AUTO_GENERATE_THUMBNAILS': True,
    'EXTRACT_DURATION': True,
}

# Nigerian Bank Codes (for reference)
NIGERIAN_BANK_CODES = {
    'ACCESS_BANK': '044',
    'CITIBANK': '023',
    'DIAMOND_BANK': '063',
    'ECOBANK': '050',
    'FIDELITY_BANK': '070',
    'FIRST_BANK': '011',
    'FIRST_CITY_MONUMENT_BANK': '214',
    'GUARANTY_TRUST_BANK': '058',
    'HERITAGE_BANK': '030',
    'KEYSTONE_BANK': '082',
    'POLARIS_BANK': '076',
    'PROVIDUS_BANK': '101',
    'STANBIC_IBTC': '221',
    'STANDARD_CHARTERED': '068',
    'STERLING_BANK': '232',
    'UNION_BANK': '032',
    'UNITED_BANK_FOR_AFRICA': '033',
    'UNITY_BANK': '215',
    'WEMA_BANK': '035',
    'ZENITH_BANK': '057',
}

# Payment Settings
DEFAULT_CURRENCY = 'NGN'
SUPPORTED_CURRENCIES = ['NGN', 'USD', 'GHS', 'KES']
DEFAULT_PAYMENT_GATEWAY = 'paystack'
SITE_URL = 'http://localhost:8000'

# Bank Account Information
BANK_ACCOUNT_NUMBER = '2046498146'
BANK_NAME = 'First Bank of Nigeria'
BANK_ACCOUNT_NAME = 'NCLEX KEYS'

# Course Creator Settings
ALLOW_USER_COURSE_CREATION = True
COURSE_APPROVAL_REQUIRED = True  # Set to False if you want auto-approval
INSTRUCTOR_REVENUE_SHARE = 70  # Percentage that goes to instructor (70%)
PLATFORM_REVENUE_SHARE = 30   # Percentage that goes to platform (30%)

# Email Settings for Course Management
COURSE_NOTIFICATION_EMAILS = {
    'NEW_COURSE_SUBMISSION': True,
    'COURSE_APPROVED': True,
    'COURSE_REJECTED': True,
    'NEW_ENROLLMENT': True,
    'COURSE_COMPLETED': True,
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'cloudinary_storage',
    'django.contrib.staticfiles',
    'cloudinary',
    'django_celery_beat',

    # Third-party apps
    'rest_framework',
    'corsheaders',

    # Your apps
    'users',
    'courses',
    'progress',
    'chats',
    'payments',
    'registration_codes',
    'adminpanel',
    'messaging',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    #'common.debug_middleware.DebugUserMiddleware',
    # 'common.middleware.RateLimitMiddleware',  # Temporarily disabled for testing 
    'common.middleware.SecurityHeadersMiddleware',  
    'common.middleware.RequestLoggingMiddleware',
    'common.middleware.UserActivityMiddleware', 
    'common.middleware.SuspiciousActivityMiddleware', 
    'common.course_middleware.PaymentSecurityMiddleware',
    'common.middleware.ErrorHandlingMiddleware', 
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# JWT Settings
JWT_ACCESS_TOKEN_LIFETIME = 60  # minutes
JWT_REFRESH_TOKEN_LIFETIME = 7   # days

# Email Settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'nclexkeysintl.academy@gmail.com'
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'your-app-password')
DEFAULT_FROM_EMAIL = 'NCLEX Keys International <nclexkeysintl.academy@gmail.com>'

# Frontend URL (for email links)
FRONTEND_URL = os.getenv('FRONTEND_URL', 'https://nclex-cx5hhtc91-peters-projects-db86b6fd.vercel.app')

# Database Settings for Local SQLite
# DATABASE (PostgreSQL on AWS RDS)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'nclexkeysdb',
        'USER': 'nclexkeysdb',
        'PASSWORD': 'nclexkeysinternational',
        'HOST': 'database-1.c9i8gmcwmltt.eu-north-1.rds.amazonaws.com',
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'require',
        },
    }
}



# Custom User Model
AUTH_USER_MODEL = 'users.User'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Cache Configuration - Temporarily disabled Redis
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Redis Configuration (commented out until Redis is installed)
# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     }
# }


# GeoIP2 Settings (for location detection)
GEOIP_PATH = os.path.join(BASE_DIR, 'geoip')

# Session Settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Security Settings
SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# URL Settings
APPEND_SLASH = True  # Set to True for consistent URL handling

# CORS Settings (if using django-cors-headers)
# Note: CORS_ALLOWED_ORIGINS is defined above at line 99
CORS_ALLOW_CREDENTIALS = True

# REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'common.authentication.JWTAuthentication',
        # Optionally keep session auth for admin panel:
        # 'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        #'rest_framework.permissions.IsAuthenticated',
        # We'll use custom permissions instead of IsAuthenticated
        'rest_framework.permissions.AllowAny',  # Let middleware handle auth
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour'
    }
}

# Rate Limiting Settings
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'

# Celery Settings (for background tasks)
# Celery Configuration - Using local memory instead of Redis
CELERY_BROKER_URL = 'memory://'
CELERY_RESULT_BACKEND = 'rpc://'

# Redis Configuration (commented out until Redis is installed)
# CELERY_BROKER_URL = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_TIMEZONE = 'UTC'

CELERY_TASK_ROUTES = {
    'management.tasks.cleanup_old_records': {'queue': 'cleanup'},
    'management.tasks.cleanup_expired_tokens': {'queue': 'cleanup'},
    'management.tasks.process_scheduled_deletions': {'queue': 'high_priority'},
    'management.tasks.send_deletion_reminders': {'queue': 'emails'},
    'management.tasks.database_health_check': {'queue': 'monitoring'},
}

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    # ============= PAYMENT TASKS =============
    
    # Run monthly payout calculation on 1st of every month at 2 AM
    'create-monthly-payouts': {
        'task': 'payments.tasks.create_monthly_payouts_task',
        'schedule': crontab(hour=2, minute=0, day_of_month=1),
    },
    
    # Auto-process small payouts daily at 10 AM
    'auto-process-payouts': {
        'task': 'payments.tasks.process_auto_payouts',
        'schedule': crontab(hour=10, minute=0),
    },
    
    'process-monthly-payouts': {
        'task': 'payments.tasks.process_monthly_payouts',
        'schedule': crontab(day_of_month=1, hour=2, minute=0),  # 1st of every month at 2 AM
    },
    
    'cleanup-expired-payments': {
        'task': 'payments.tasks.cleanup_expired_payments',
        'schedule': crontab(minute='*/30'),  # Every 30 minutes
    },
    
    'verify-bank-transfers': {
        'task': 'payments.tasks.verify_pending_bank_transfers',
        'schedule': crontab(minute='*/15'),  # Every 15 minutes
    },
    
    # Payout reminder notifications
    'send-payout-reminders': {
        'task': 'payments.tasks.send_payout_reminders',
        'schedule': crontab(hour=10, minute=0, day_of_month=25),  # 25th of month at 10 AM
    },

    # ============= USER MANAGEMENT TASKS =============
    
    'cleanup-old-records': {
        'task': 'management.tasks.cleanup_old_records',
        'schedule': crontab(hour=2, minute=0),  # Run daily at 2 AM
    },
    
    'cleanup-expired-tokens': {
        'task': 'management.tasks.cleanup_expired_tokens',
        'schedule': crontab(minute=0, hour='*/6'),  # Run every 6 hours
    },
    
    'process-scheduled-deletions': {
        'task': 'management.tasks.process_scheduled_deletions',
        'schedule': crontab(hour=3, minute=0),  # Run daily at 3 AM
    },
    
    'cleanup-inactive-sessions': {
        'task': 'management.tasks.cleanup_inactive_sessions',
        'schedule': crontab(minute=0, hour='*/12'),  # Run every 12 hours
    },
    
    'cleanup-old-login-attempts': {
        'task': 'management.tasks.cleanup_old_login_attempts',
        'schedule': crontab(hour=4, minute=0, day_of_week=0),  # Run weekly on Sunday
    },
    
    'cleanup-old-email-logs': {
        'task': 'management.tasks.cleanup_old_email_logs',
        'schedule': crontab(hour=5, minute=0, day_of_month=1),  # Run monthly
    },
    
    'send-deletion-reminders': {
        'task': 'management.tasks.send_deletion_reminders',
        'schedule': crontab(hour=10, minute=0),  # Run daily at 10 AM
    },

    # ============= SYSTEM MONITORING TASKS =============
    
    'database-health-check': {
        'task': 'management.tasks.database_health_check',
        'schedule': crontab(hour=1, minute=0),  # Run daily at 1 AM
    },
    
    # System health alerts (more frequent)
    'system-health-check': {
        'task': 'management.tasks.comprehensive_health_check',
        'schedule': crontab(minute='*/30'),  # Every 30 minutes
    },
    
    # Weekly admin report
    'send-weekly-admin-report': {
        'task': 'management.tasks.send_weekly_admin_report',
        'schedule': crontab(hour=8, minute=0, day_of_week=1),  # Monday at 8 AM
    },

    # ============= INSTRUCTOR & ANALYTICS TASKS =============
    
    # Monthly instructor analytics
    'send-monthly-instructor-analytics': {
        'task': 'management.tasks.send_monthly_instructor_analytics',
        'schedule': crontab(hour=9, minute=0, day_of_month=1),  # 1st of month at 9 AM
    },
    
    # Monthly revenue report for admins
    'generate-monthly-revenue-report': {
        'task': 'analytics.tasks.generate_monthly_revenue_report',
        'schedule': crontab(hour=7, minute=0, day_of_month=1),  # 1st of month at 7 AM
    },
    
    # Track instructor engagement daily
    'track-instructor-engagement': {
        'task': 'analytics.tasks.track_instructor_engagement',
        'schedule': crontab(hour=23, minute=0),  # Daily at 11 PM
    },

    # ============= COURSE & STUDENT TASKS =============
    
    # Student progress reminders
    'send-progress-reminders': {
        'task': 'courses.tasks.send_progress_reminders',
        'schedule': crontab(hour=14, minute=0, day_of_week=3),  # Wednesday at 2 PM
    },
    
    # Course completion follow-ups
    'send-course-completion-followups': {
        'task': 'courses.tasks.send_completion_followups',
        'schedule': crontab(hour=16, minute=0, day_of_week=5),  # Friday at 4 PM
    },
    
    # Inactive student re-engagement
    'reengage-inactive-students': {
        'task': 'courses.tasks.reengage_inactive_students',
        'schedule': crontab(hour=11, minute=0, day_of_week=2),  # Tuesday at 11 AM
    },

    # ============= EXAM & CERTIFICATE TASKS =============
    
    # Certificate expiry warnings
    'check-certificate-expiry': {
        'task': 'exams.tasks.check_certificate_expiry_warnings',
        'schedule': crontab(hour=8, minute=0, day_of_month=15),  # 15th of month at 8 AM
    },
    
    # Exam attempt cleanup (old incomplete attempts)
    'cleanup-old-exam-attempts': {
        'task': 'exams.tasks.cleanup_old_exam_attempts',
        'schedule': crontab(hour=2, minute=30, day_of_week=0),  # Sunday at 2:30 AM
    },

    # ============= SECURITY TASKS =============
    
    # Fraud detection scan
    'fraud-detection-scan': {
        'task': 'security.tasks.run_fraud_detection_scan',
        'schedule': crontab(hour=3, minute=30),  # Daily at 3:30 AM
    },
    
    # Suspicious activity monitoring
    'monitor-suspicious-activity': {
        'task': 'security.tasks.monitor_suspicious_activity',
        'schedule': crontab(minute='*/20'),  # Every 20 minutes
    },
    
    # IP reputation check
    'check-ip-reputation': {
        'task': 'security.tasks.check_ip_reputation',
        'schedule': crontab(hour=4, minute=0),  # Daily at 4 AM
    },

    # ============= BACKUP & MAINTENANCE TASKS =============
    
    # Weekly backup verification
    'verify-backups': {
        'task': 'management.tasks.verify_system_backups',
        'schedule': crontab(hour=6, minute=0, day_of_week=0),  # Sunday at 6 AM
    },
    
    # Monthly maintenance report
    'monthly-maintenance-report': {
        'task': 'management.tasks.generate_maintenance_report',
        'schedule': crontab(hour=5, minute=0, day_of_month=1),  # 1st of month at 5 AM
    },
    
    # Database optimization (weekly)
    'optimize-database': {
        'task': 'management.tasks.optimize_database',
        'schedule': crontab(hour=1, minute=30, day_of_week=0),  # Sunday at 1:30 AM
    },

    # ============= NOTIFICATION TASKS =============
    
    # Send bulk notifications (process queue)
    'process-notification-queue': {
        'task': 'notifications.tasks.process_notification_queue',
        'schedule': crontab(minute='*/10'),  # Every 10 minutes
    },
    
    # Clean up old notifications
    'cleanup-old-notifications': {
        'task': 'notifications.tasks.cleanup_old_notifications',
        'schedule': crontab(hour=3, minute=45, day_of_week=1),  # Monday at 3:45 AM
    },

    # ============= MARKETING & ENGAGEMENT TASKS =============
    
    # Send welcome series to new users
    'send-welcome-series': {
        'task': 'marketing.tasks.send_welcome_email_series',
        'schedule': crontab(hour=9, minute=30),  # Daily at 9:30 AM
    },
    
    # Course recommendation engine
    'generate-course-recommendations': {
        'task': 'recommendations.tasks.generate_course_recommendations',
        'schedule': crontab(hour=12, minute=0, day_of_week=1),  # Monday at noon
    },
    
    # Abandoned cart recovery
    'recover-abandoned-enrollments': {
        'task': 'marketing.tasks.recover_abandoned_enrollments',
        'schedule': crontab(hour=15, minute=0),  # Daily at 3 PM
    },

    # ============= CONTENT MODERATION TASKS =============
    
    # Auto-moderate course content
    'auto-moderate-content': {
        'task': 'moderation.tasks.auto_moderate_content',
        'schedule': crontab(minute='*/45'),  # Every 45 minutes
    },
    
    # Review flagged content
    'review-flagged-content': {
        'task': 'moderation.tasks.review_flagged_content',
        'schedule': crontab(hour=8, minute=15, day_of_week='1-5'),  # Weekdays at 8:15 AM
    },

    # ============= PERFORMANCE MONITORING =============
    
    # Monitor API performance
    'monitor-api-performance': {
        'task': 'monitoring.tasks.monitor_api_performance',
        'schedule': crontab(minute='*/15'),  # Every 15 minutes
    },
    
    # Generate performance reports
    'generate-performance-reports': {
        'task': 'monitoring.tasks.generate_performance_reports',
        'schedule': crontab(hour=6, minute=30, day_of_week=1),  # Monday at 6:30 AM
    },
}



# Logging Configuration
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOG_DIR = os.path.join(BASE_DIR, 'log')

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'app.log'),
            'maxBytes': 1024*512,  # 512 KB
            'backupCount': 2,      # Only 2 backups
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['file', 'console'],  # Send logs to file and console
        'level': 'INFO',
    },
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Media files configuration for Cloudinary
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': 'dvmse886w',
    'API_KEY': '489264838748466',
    'API_SECRET': 'qUYlv4AnJeqHCA6he_zH-qX_J9E'
}

# Use Cloudinary for media storage
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Video upload limits
MAX_VIDEO_SIZE = 500 * 1024 * 1024  # 500MB
ALLOWED_VIDEO_FORMATS = ['mp4', 'mov', 'avi', 'mkv']

# Course limits per user
MAX_COURSES_PER_INSTRUCTOR = 50  # Set to None for unlimited
FREE_COURSES_LIMIT = 5  # How many free courses an instructor can create

# Media URL and Root (Cloudinary handles this)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
