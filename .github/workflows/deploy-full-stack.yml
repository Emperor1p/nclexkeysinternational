name: Deploy Full Stack to AWS

on:
  push:
    branches: [ main, production-ready ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production-ready'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        cd backend
        python manage.py check
    
    - name: Check EC2 deployment prerequisites
      run: |
        if [ -z "$EC2_HOST" ]; then
          echo "‚ö†Ô∏è  EC2_HOST secret not configured. Backend deployment will be skipped."
          echo "üí° To enable backend deployment, add EC2_HOST and EC2_SSH_KEY secrets to GitHub."
        else
          echo "‚úÖ EC2_HOST secret found. Backend deployment will proceed."
        fi
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
    
    - name: Deploy to EC2
      if: env.EC2_HOST != ''
      uses: appleboy/ssh-action@v1.0.0
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "üöÄ Starting backend deployment..."
          cd /home/ubuntu/nclexkey/backend
          echo "üì• Pulling latest code..."
          git pull origin main
          echo "üì¶ Activating virtual environment..."
          source venv/bin/activate
          echo "üì• Installing dependencies..."
          pip install -r requirements.txt
          echo "üìã Running migrations..."
          python manage.py migrate
          echo "üë§ Creating default admin and instructor accounts..."
          python manage.py create_default_accounts
          echo "üìÅ Collecting static files..."
          python manage.py collectstatic --noinput
          echo "Restarting services..."
          sudo systemctl restart gunicorn
          sudo systemctl restart nginx
          echo "‚úÖ Backend deployment completed successfully!"

  deploy-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production-ready'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build -- --no-lint
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
    
    - name: Deploy to S3
      run: |
        cd frontend
        aws s3 sync out/ s3://nclexkeysfrontend --delete
        echo "Frontend deployed to S3 successfully!"
        echo "üåê Frontend is now live at: https://nclexkeysfrontend.s3.eu-north-1.amazonaws.com"
    
    - name: Invalidate CloudFront Cache
      run: |
        echo "Invalidating CloudFront cache..."
        aws cloudfront create-invalidation --distribution-id E378LQ3H4KFM78 --paths "/*"
        echo "‚úÖ CloudFront cache invalidated successfully!"
